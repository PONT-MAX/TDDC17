
import java.util.Vector;

public Vector<int[2]> A_star(int[2] tile, int[2] target){

	
	// The set of nodes already evaluated.
    Vector<Vector<int[2]>> explored;
    
    
    // The set of currently discovered nodes still to be evaluated.
    // Initially, only the start node is known. Ordered by f
    Vector<Vector<int[2]>> frontier;
    Vector<int[2]> node;
    node.add(tile);
    

	Vector<int[2]> children;
	int[2] child_pos;
	
	while(true){
	
		if(frontier.empty()){
			Vector<int[2]> failure;
			return failure;
		}
		
		
		//Pop frointier (Choose node w/ lowest f)
		node = frontier.remove(0); 
		
		//Reached goal
		if(sameTile(node[0],target))
			return node;
		
		explored.add(node);
		children.clear();
		child_pos = node(0); 
		child_pos[0]++;
		children.add(child_pos);
		child_pos[0] = child_pos[0] -2;
		children.add(child_pos);
		
		child_pos[0]++;
		child_pos[1]++;
		children.add(child_pos);
		child_pos[1] = child_pos[1] -2;
		children.add(child_pos);
		
		
		for(i = 0;i<4;++i){
			
			if(tile_clear(state.world,children[i]){
				System.out.println("Path! " + children[i]);
				if( !child_exist(frontier,explored,children[i]) ){
					System.out.println("Insert children in frontier");
					insert_child_frontier(children[i],frontier);
					}
				else if( child_in_frontier(children[i],frontier)){
				 	System.out.println("In frontier, replaced old node");
				 	
			}
			
		
		}
		
		
	
	}
	
	

}

public int[2] find_best_f(Vector<int[2]> v){

	Iterator i = v.iterator();
	while(i.hasNext()){
	i.next()
	}

}

public Boolean sameTile(int[2] a, int[2] b){

	if(a[0] == b[0] && a[1] == b[1])
		return true;
	
	return false;

}

public Boolean tile_clear(int[][] world,int[2] pos){
		
		if(world[pos[0][pos[1] > 1)
			return true;
			
		return false;
		
}



public int cost_h(int[2] tile, int[2] target){

	int dx = Math.abs(tile[0]-target[0]);
	
	int dy = Math.abs(tile[1]-target[1]);
	
	
	return = dx + dy;
	

}


public int get_tile_info(MyAgentState agent, String direction){
	
	int checkup_dir;
	if(direction == "RIGHT")
		checkup_dir = 1;
	if(direction == "LEFT")
		checkup_dir = -1;
	
	
	int x_pos = agent.agent_x_position;
	int y_pos = agent.agent_y_position;
	
	
	int dir = agent.agent_direction;
	
	int look_up_dir  = ((((dir+checkup_dir) % 4) + 4) % 4);
	
	if(look_up_dir == 0){
		return agent.world[x_pos][y_pos-1];
	}
	if(look_up_dir == 1){
		return agent.world[x_pos+1][y_pos];
	}
	if(look_up_dir == 2){
		return agent.world[x_pos][y_pos+1];
	}
	if(look_up_dir == 3){
		return agent.world[x_pos-1][y_pos];
	}
		
}